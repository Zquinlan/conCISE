}
quantBackgroundNetworks <- quant_blanks_env%>%
flagBackgroundNetworks(., network, background_features)
?rlang::syms
flagBackgroundNetworks <- function(data, networkColumn, backgroundColumn, minConsensus = 0.5) {
require("tidyverse")
flagNetworks <- data%>%
mutate(count = 1)%>%
group_by({{networkColumn}}, {{backgroundColumn}})%>%
summarize(count = sum(count))%>%
ungroup()%>%
group_by({{networkColumn}})%>%
mutate(subnetworkPercentReal = count/sum(count),
backgroundNetworks = case_when(subnetworkPercentReal > 0.5 ~ 'real',
TRUE ~ 'background'))%>%
select({{networkColumn}}, subnetworkPercentReal, backgroundNetworks)
flagExport <- data%>%
left_join(flagNetworks, by = rlang::syms({{networkColumn}}))
}
quantBackgroundNetworks <- quant_blanks_env%>%
flagBackgroundNetworks(., network, background_features)
flagBackgroundNetworks <- function(data, networkColumn, backgroundColumn, minConsensus = 0.5) {
require("tidyverse")
flagNetworks <- data%>%
mutate(count = 1)%>%
group_by({{networkColumn}}, {{backgroundColumn}})%>%
summarize(count = sum(count))%>%
ungroup()%>%
group_by({{networkColumn}})%>%
mutate(subnetworkPercentReal = count/sum(count),
backgroundNetworks = case_when(subnetworkPercentReal > 0.5 ~ 'real',
TRUE ~ 'background'))%>%
select({{networkColumn}}, subnetworkPercentReal, backgroundNetworks)
flagExport <- data%>%
left_join(flagNetworks, by = as.string({{networkColumn}}))
}
quantBackgroundNetworks <- quant_blanks_env%>%
flagBackgroundNetworks(., network, background_features)
flagBackgroundNetworks <- function(data, networkColumn, backgroundColumn, minConsensus = 0.5) {
require("tidyverse")
flagNetworks <- data%>%
mutate(count = 1)%>%
group_by({{networkColumn}}, {{backgroundColumn}})%>%
summarize(count = sum(count))%>%
ungroup()%>%
group_by({{networkColumn}})%>%
mutate(subnetworkPercentReal = count/sum(count),
backgroundNetworks = case_when(subnetworkPercentReal > 0.5 ~ 'real',
TRUE ~ 'background'))%>%
select({{networkColumn}}, subnetworkPercentReal, backgroundNetworks)
flagExport <- data%>%
left_join(flagNetworks, by = as_string({{networkColumn}}))
}
quantBackgroundNetworks <- quant_blanks_env%>%
flagBackgroundNetworks(., network, background_features)
?str
flagBackgroundNetworks <- function(data, networkColumn, backgroundColumn, minConsensus = 0.5) {
require("tidyverse")
flagNetworks <- data%>%
mutate(count = 1)%>%
group_by({{networkColumn}}, {{backgroundColumn}})%>%
summarize(count = sum(count))%>%
ungroup()%>%
group_by({{networkColumn}})%>%
mutate(subnetworkPercentReal = count/sum(count),
backgroundNetworks = case_when(subnetworkPercentReal > 0.5 ~ 'real',
TRUE ~ 'background'))%>%
select({{networkColumn}}, subnetworkPercentReal, backgroundNetworks)
flagExport <- data%>%
left_join(flagNetworks, by = paste({{networkColumn}}))
}
quantBackgroundNetworks <- quant_blanks_env%>%
flagBackgroundNetworks(., network, background_features)
flagBackgroundNetworks <- function(data, networkColumn, backgroundColumn, minConsensus = 0.5) {
require("tidyverse")
flagNetworks <- data%>%
mutate(count = 1)%>%
group_by({{networkColumn}}, {{backgroundColumn}})%>%
summarize(count = sum(count))%>%
ungroup()%>%
group_by({{networkColumn}})%>%
mutate(subnetworkPercentReal = count/sum(count),
backgroundNetworks = case_when(subnetworkPercentReal > 0.5 ~ 'real',
TRUE ~ 'background'))%>%
select({{networkColumn}}, subnetworkPercentReal, backgroundNetworks)
flagExport <- data%>%
left_join(flagNetworks, by = paste({networkColumn}))
}
quantBackgroundNetworks <- quant_blanks_env%>%
flagBackgroundNetworks(., network, background_features)
flagBackgroundNetworks <- function(data, networkColumn, backgroundColumn, minConsensus = 0.5) {
require("tidyverse")
flagNetworks <- data%>%
mutate(count = 1)%>%
group_by({{networkColumn}}, {{backgroundColumn}})%>%
summarize(count = sum(count))%>%
ungroup()%>%
group_by({{networkColumn}})%>%
mutate(subnetworkPercentReal = count/sum(count),
backgroundNetworks = case_when(subnetworkPercentReal > 0.5 ~ 'real',
TRUE ~ 'background'))%>%
select({{networkColumn}}, subnetworkPercentReal, backgroundNetworks)
flagExport <- data%>%
left_join(flagNetworks, by = !! rlang::ensym(networkColumn))
}
quantBackgroundNetworks <- quant_blanks_env%>%
flagBackgroundNetworks(., network, background_features)
flagBackgroundNetworks <- function(data, networkColumn, backgroundColumn, minConsensus = 0.5) {
require("tidyverse")
flagNetworks <- data%>%
mutate(count = 1)%>%
group_by({{networkColumn}}, {{backgroundColumn}})%>%
summarize(count = sum(count))%>%
ungroup()%>%
group_by({{networkColumn}})%>%
mutate(subnetworkPercentReal = count/sum(count),
backgroundNetworks = case_when(subnetworkPercentReal > 0.5 ~ 'real',
TRUE ~ 'background'))%>%
select({{networkColumn}}, subnetworkPercentReal, backgroundNetworks)
flagExport <- data%>%
left_join(flagNetworks, by = networkColumn)
}
quantBackgroundNetworks <- quant_blanks_env%>%
flagBackgroundNetworks(., network, background_features)
flagBackgroundNetworks <- function(data, networkColumn, backgroundColumn, minConsensus = 0.5) {
require("tidyverse")
flagNetworks <- data%>%
mutate(count = 1)%>%
group_by({{networkColumn}}, {{backgroundColumn}})%>%
summarize(count = sum(count))%>%
ungroup()%>%
group_by({{networkColumn}})%>%
mutate(subnetworkPercentReal = count/sum(count),
backgroundNetworks = case_when(subnetworkPercentReal > 0.5 ~ 'real',
TRUE ~ 'background'))%>%
select({{networkColumn}}, subnetworkPercentReal, backgroundNetworks)
flagExport <- data%>%
left_join(flagNetworks, by = toString({{networkColumn}}))
}
quantBackgroundNetworks <- quant_blanks_env%>%
flagBackgroundNetworks(., network, background_features)
flagBackgroundNetworks <- function(data, networkColumn, backgroundColumn, minConsensus = 0.5) {
require("tidyverse")
flagNetworks <- data%>%
mutate(count = 1)%>%
group_by({{networkColumn}}, {{backgroundColumn}})%>%
summarize(count = sum(count))%>%
ungroup()%>%
group_by({{networkColumn}})%>%
mutate(subnetworkPercentReal = count/sum(count),
backgroundNetworks = case_when(subnetworkPercentReal > 0.5 ~ 'real',
TRUE ~ 'background'))%>%
select({{networkColumn}}, subnetworkPercentReal, backgroundNetworks)
flagExport <- data%>%
left_join(flagNetworks, by = toString(networkColumn))
}
quantBackgroundNetworks <- quant_blanks_env%>%
flagBackgroundNetworks(., network, background_features)
flagBackgroundNetworks <- function(data, networkColumn, backgroundColumn, minConsensus = 0.5) {
require("tidyverse")
flagNetworks <- data%>%
mutate(count = 1)%>%
group_by({{networkColumn}}, {{backgroundColumn}})%>%
summarize(count = sum(count))%>%
ungroup()%>%
group_by({{networkColumn}})%>%
mutate(subnetworkPercentReal = count/sum(count),
backgroundNetworks = case_when(subnetworkPercentReal > 0.5 ~ 'real',
TRUE ~ 'background'))%>%
select({{networkColumn}}, subnetworkPercentReal, backgroundNetworks)
flagExport <- data%>%
left_join(flagNetworks, by = quo_name(networkColumn))
}
quantBackgroundNetworks <- quant_blanks_env%>%
flagBackgroundNetworks(., network, background_features)
flagBackgroundNetworks <- function(data, networkColumn, backgroundColumn, minConsensus = 0.5) {
require("tidyverse")
flagNetworks <- data%>%
mutate(count = 1)%>%
group_by({{networkColumn}}, {{backgroundColumn}})%>%
summarize(count = sum(count))%>%
ungroup()%>%
group_by({{networkColumn}})%>%
mutate(subnetworkPercentReal = count/sum(count),
backgroundNetworks = case_when(subnetworkPercentReal > 0.5 ~ 'real',
TRUE ~ 'background'))%>%
select({{networkColumn}}, subnetworkPercentReal, backgroundNetworks)
flagExport <- data%>%
left_join(flagNetworks, by = quo_name({{networkColumn}}))
}
quantBackgroundNetworks <- quant_blanks_env%>%
flagBackgroundNetworks(., network, background_features)
flagBackgroundNetworks <- function(data, networkColumn, backgroundColumn, minConsensus = 0.5) {
require("tidyverse")
flagNetworks <- data%>%
mutate(count = 1)%>%
group_by({{networkColumn}}, {{backgroundColumn}})%>%
summarize(count = sum(count))%>%
ungroup()%>%
group_by({{networkColumn}})%>%
mutate(subnetworkPercentReal = count/sum(count),
backgroundNetworks = case_when(subnetworkPercentReal > 0.5 ~ 'real',
TRUE ~ 'background'))%>%
select({{networkColumn}}, subnetworkPercentReal, backgroundNetworks)
join <- enquo({{networkColumn}})
flagExport <- data%>%
left_join(flagNetworks, by = quo_name(join))
}
quantBackgroundNetworks <- quant_blanks_env%>%
flagBackgroundNetworks(., network, background_features)
flagBackgroundNetworks <- function(data, networkColumn, backgroundColumn, minConsensus = 0.5) {
require("tidyverse")
flagNetworks <- data%>%
mutate(count = 1)%>%
group_by({{networkColumn}}, {{backgroundColumn}})%>%
summarize(count = sum(count))%>%
ungroup()%>%
group_by({{networkColumn}})%>%
mutate(subnetworkPercentReal = count/sum(count),
backgroundNetworks = case_when(subnetworkPercentReal > 0.5 ~ 'real',
TRUE ~ 'background'))%>%
select({{networkColumn}}, subnetworkPercentReal, backgroundNetworks)
join <- enquo(networkColumn)
flagExport <- data%>%
left_join(flagNetworks, by = quo_name(join))
}
quantBackgroundNetworks <- quant_blanks_env%>%
flagBackgroundNetworks(., network, background_features)
quantBackgroundNetworks
quantBackgroundNetworks%>% select(feature_number, background_features:ncol(.))
flagBackgroundNetworks <- function(data, networkColumn, backgroundColumn, minConsensus = 0.5) {
require("tidyverse")
flagNetworks <- data%>%
mutate(count = 1)%>%
group_by({{networkColumn}}, {{backgroundColumn}})%>%
summarize(count = sum(count))%>%
ungroup()%>%
group_by({{networkColumn}})%>%
mutate(subnetworkPercentReal = count/sum(count),
backgroundNetworks = case_when(subnetworkPercentReal > 0.5 ~ 'real',
TRUE ~ 'background'))%>%
select({{networkColumn}}, subnetworkPercentReal, backgroundNetworks)
# join <- enquo(networkColumn)
#
# flagExport <- data%>%
#   left_join(flagNetworks, by = quo_name(join))
}
quantBackgroundNetworks <- quant_blanks_env%>%
flagBackgroundNetworks(., network, background_features)
quantBackgroundNetworks
flagBackgroundNetworks <- function(data, networkColumn, backgroundColumn, minConsensus = 0.5) {
require("tidyverse")
flagNetworks <- data%>%
mutate(count = 1)%>%
group_by({{networkColumn}}, {{backgroundColumn}})%>%
summarize(count = sum(count))%>%
ungroup()%>%
group_by({{networkColumn}})%>%
mutate(subnetworkPercentReal = count/sum(count),
backgroundNetworks = case_when(subnetworkPercentReal > 0.5 ~ 'real',
TRUE ~ 'background'))%>%
filter({{backgroundColumn}} == 'real')
select({{networkColumn}}, subnetworkPercentReal, backgroundNetworks)
# join <- enquo(networkColumn)
#
# flagExport <- data%>%
#   left_join(flagNetworks, by = quo_name(join))
}
flagBackgroundNetworks <- function(data, networkColumn, backgroundColumn, minConsensus = 0.5) {
require("tidyverse")
flagNetworks <- data%>%
mutate(count = 1)%>%
group_by({{networkColumn}}, {{backgroundColumn}})%>%
summarize(count = sum(count))%>%
ungroup()%>%
group_by({{networkColumn}})%>%
mutate(subnetworkPercentReal = count/sum(count),
backgroundNetworks = case_when(subnetworkPercentReal > 0.5 ~ 'real',
TRUE ~ 'background'))%>%
filter({{backgroundColumn}} == 'real')%>%
select({{networkColumn}}, subnetworkPercentReal, backgroundNetworks)
# join <- enquo(networkColumn)
#
# flagExport <- data%>%
#   left_join(flagNetworks, by = quo_name(join))
}
quantBackgroundNetworks <- quant_blanks_env%>%
flagBackgroundNetworks(., network, background_features)
quantBackgroundNetworks
flagBackgroundNetworks <- function(data, networkColumn, backgroundColumn, minConsensus = 0.5) {
require("tidyverse")
flagNetworks <- data%>%
mutate(count = 1)%>%
group_by({{networkColumn}}, {{backgroundColumn}})%>%
summarize(count = sum(count))%>%
ungroup()%>%
group_by({{networkColumn}})%>%
mutate(subnetworkPercentReal = count/sum(count),
backgroundNetworks = case_when(subnetworkPercentReal > 0.5 ~ 'real',
TRUE ~ 'background'))%>%
filter({{backgroundColumn}} == 'real')%>%
select({{networkColumn}}, subnetworkPercentReal, backgroundNetworks)
join <- enquo(networkColumn)
flagExport <- data%>%
left_join(flagNetworks, by = quo_name(join))%>%
mutate(backgroundNetworks = case_when(is.na(backgroundNetworks) ~ 'background',
TRUE ~ backgroundNetworks))
}
quantBackgroundNetworks <- quant_blanks_env%>%
flagBackgroundNetworks(., network, background_features)
quantBackgroundNetworks
paths <- c(path1, path2, path4, path8)
# Verification of Eco Net consesnsus scores
# Load Libraries
library(tidyverse)
library(DescTools)
library(wesanderson)
library(grDevices)
select <- dplyr::select
gen_theme <-  function(x){
theme(plot.margin = unit(c(1,1,1.5,1.2), 'cm'),
axis.title = element_text(size = 25),
axis.text.x = element_text(angle = 60, hjust = 1, size = 25),
axis.text.y = element_text(size = 25),
plot.title = element_text(size = 25, face = "bold"),
legend.text = element_text(size = 25),
legend.title = element_text(size = 25),
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major.y = element_line(size = 0.2, linetype = 'solid',colour = "gray"), # get rid of major grid
panel.grid.major.x = element_line(size = 0.2, linetype = 'solid',colour = "gray"))
}
# Reading in all data which could be gathered from respecrtive dat --------
# set all locations:
path1 <- 'dataset1_unmodified'
path2 <- 'dataset1_NAP'
path3 <- 'dataset1_SmallNets'
path4 <- 'dataset2_unmodified'
path5 <- 'dataset1_FalsePositives'
path6 <- 'dataset2_FalsePositives'
path7 <- 'dataset1_smallNetsFP'
path8 <- 'dataset4_unmodified'
path9 <- 'dataset4_FalsePositives'
paths <- c(path1, path2, path4, pa
paths <- c(path1, path2, path4, path8)
setwd('~/Documents/GitHub/ecoNet/verification/')
setwd('~/Documents/GitHub/conCISE/verification/')
# Combine all verification datasets
for (name in paths){
path <- paste0('~/Documents/GitHub/ecoNet/verification/', name)
network <- read_tsv(paste0(path, '/Node_info.tsv'))%>%
select(`cluster index`, componentindex)%>%
rename(feature_number = 1,
network = 2)
libraryMatches <- read_csv(paste0(path, "/libraryMatch.csv"))%>%
rename("feature_number" = '#Scan#',
libraryID = Compound_Name,
library_superclass = superclass,
library_class = class,
library_subclass = subclass)%>%
select(feature_number, libraryID, library_superclass, library_class, library_subclass)
canopus <- read_csv(paste0(path, '/canopus_summary.csv'))%>%
rename(feature_number = scan,
canopus_superclass = superclass,
canopus_class = class,
canopus_subclass = subclass)%>%
select(feature_number, canopus_superclass, canopus_class, canopus_subclass)%>%
unique()
ecoNet <- read_csv(paste0(path, '/ecoNetConsensus.csv'))%>%
select(-c(1))%>%
rename(feature_number = scan)%>%
filter(!is.na(ecoNetConsensus))%>%
unique()
combined <- network%>%
left_join(libraryMatches, by = 'feature_number')%>%
# left_join(analogMatches, by = 'feature_number')%>%
# left_join(CSIFingerID, by = 'feature_number')%>%
# left_join(napDf, by = 'feature_number')%>%
left_join(canopus, by = 'feature_number')%>%
# left_join(molnetClassy, by = 'feature_number')%>%
left_join(ecoNet, by = c('network', 'feature_number'))%>%
mutate(experiment = name)%>%
select(experiment, everything())
write_csv(combined, paste0('~/Documents/GitHub/ecoNet/verification/analysis/combined_', name,'.csv'))
}
setwd('~/Documents/GitHub/ecoNet/verification/analysis/')
setwd('~/Documents/GitHub/conCISE//verification/analysis/')
combined_csv <- dir(path = "~/Documents/GitHub/conCISE/verification/analysis/", pattern = "*.csv")%>%
map(read_csv)%>%
reduce(bind_rows)
combined_csv[combined_csv == 'N/A'] <- NA_real_
combined_csv[combined_csv == 'null'] <- NA_real_
combined_csv[combined_csv == 'no matches'] <- NA_real_
combined_csv[combined_csv == 'nan'] <- NA_real_
baseDf <- combined_csv%>%
separate(experiment, c('experiment', 'version'), sep = '_')
# VIZUALIZATIONS -- Comparing percent annotation --------------------------
order <- c('Library Matches', 'Analog Matches', 'canopus', 'Molnet superclass', 'Molnet class', 'Molnet subclass', 'ecoNetConsensus')
sources <- c('library_superclass', 'ecoNetConsensus')
totals <- combined_csv%>%
select(experiment, network)%>%
unique()%>%
group_by(experiment)%>%
mutate(totalFeatures = 1)%>%
select(-network)%>%
summarize_if(is.numeric, sum)%>%
separate(experiment, c('experiment', 'version'), sep = '_')
sums <- baseDf%>%
select(experiment, version, network, all_of(sources))%>%
rename('Library Matches' = 'library_superclass',
# 'Analog Matches' = 'analog_superclass',
# 'CSI Finger ID' = 'csiFinger_superclass',
'ecoNet' = 'ecoNetConsensus')%>%
# 'Molnet superclass' = 'MolNet_superclass',
# 'Molnet class' = 'MolNet_class',
# 'Molnet subclass' = 'MolNet_subclass')%>%
gather(annotationSource, annotation, 4:ncol(.))%>%
group_by(experiment, version, network,  annotationSource)%>%
mutate(annotation = case_when(sum(!is.na(annotation)) > 0 ~ 1,
TRUE ~ 0))%>%
unique()%>%
ungroup()%>%
group_by(experiment, version, annotationSource)%>%
summarize_if(is.numeric, sum)%>%
left_join(totals, by = c('experiment', 'version'))%>%
mutate(percent = annotation/totalFeatures*100)
# Plotting annotation rates with true positive rates
sums%>%
ungroup()%>%
filter(version != 'unmodified')%>%
group_by(annotationSource)%>%
mutate(std = sd(percent, na.rm = TRUE))%>%
summarize_if(is.numeric, mean, na.rm = TRUE)
sums%>%
ungroup()%>%
filter(version != 'unmodified')%>%
# mutate(experiment = case_when(version == 'NAP' ~ paste0(experiment, "_", version),
#                               TRUE ~ experiment))%>%
group_by(experiment, annotationSource)%>%
mutate(std = sd(percent))%>%
summarize_if(is.numeric, mean)%>%
ungroup()%>%
mutate(annotationSource = factor(annotationSource),
annotationSource = fct_relevel(annotationSource, order),
annotationSource = fct_rev(annotationSource))%>%
ggplot(aes(annotationSource, percent)) +
geom_bar(stat = 'summary', fun.y = 'mean') +
# geom_bar(aes(annotationSource, truePositives, fill = 'Real'), stat = 'summary', fun.y = 'mean', na.rm = TRUE) +
geom_errorbar(aes(ymax = percent + std, ymin = percent - std)) +
geom_text(aes(y = percent + 10, label = paste(round(percent, 2), '%')), size = 6) +
coord_flip() +
scale_fill_manual(values = '#006658') +
facet_wrap(~experiment) +
labs(x = 'Annotation Source', y = 'Percent of networks annotated', fill = 'True Positives') +
gen_theme() +
theme(legend.position = 'None')
fpRates <- sums%>%
mutate(fpCompare = case_when(version == 'FalsePositives' & annotationSource == 'ecoNetConsensus' ~ 'ecoNet Insilico Consensus',
version == 'unmodified' & annotationSource == 'ecoNetConsensus' ~ 'ecoNet Library Consensus',
version == 'NAP' ~ paste(annotationSource, 'NAP'),
TRUE ~ version))
fpRates%>%
filter(version %in% c('unmodified', 'FalsePositives', 'NAP'),
annotationSource %in% c('ecoNetConsensus', 'Molnet superclass', 'Molnet class', 'Molnet subclass'),
!fpCompare %in% c('ecoNetConsensus NAP', 'FalsePositives', 'unmodified'))%>%
ggplot(aes(fpCompare, truePositives, fill = experiment)) +
geom_bar(aes(y = percent, fill = 'Total Annotations'), stat = 'identity', position = position_dodge2()) +
geom_bar(stat = 'identity', position = position_dodge2()) +
scale_fill_manual(values = c(wes_palette('Darjeeling1', n = 5, type = 'discrete')[2:3], 'grey')) +
labs(x = 'Annotation Source', y = bquote(atop('Percent of networks', 'properly annotated')), fill = 'Experiment') +
gen_theme()
head(fpRates)
fpRates%>%
filter(version %in% c('unmodified', 'FalsePositives', 'NAP'),
annotationSource %in% c('ecoNetConsensus', 'Molnet superclass', 'Molnet class', 'Molnet subclass'),
!fpCompare %in% c('ecoNetConsensus NAP', 'FalsePositives', 'unmodified'))%>%
ggplot(aes(fpCompare, truePositives, fill = experiment))
fpRates%>%
filter(version %in% c('unmodified', 'FalsePositives', 'NAP'),
annotationSource %in% c('ecoNetConsensus', 'Molnet superclass', 'Molnet class', 'Molnet subclass'),
!fpCompare %in% c('ecoNetConsensus NAP', 'FalsePositives', 'unmodified'))%>%
ggplot(aes(fpCompare, percent, fill = experiment)) +
geom_bar(aes(fill = 'Total Annotations'), stat = 'identity', position = position_dodge2()) +
# geom_bar(stat = 'identity', position = position_dodge2()) +
scale_fill_manual(values = c(wes_palette('Darjeeling1', n = 5, type = 'discrete')[2:3], 'grey')) +
labs(x = 'Annotation Source', y = bquote(atop('Percent of networks', 'properly annotated')), fill = 'Experiment') +
gen_theme()
fpRates%>%
filter(version %in% c('unmodified', 'FalsePositives', 'NAP'),
annotationSource %in% c('ecoNetConsensus', 'Molnet superclass', 'Molnet class', 'Molnet subclass'),
!fpCompare %in% c('ecoNetConsensus NAP', 'FalsePositives', 'unmodified'))%>%
ggplot(aes(fpCompare, percent, fill = experiment)) +
geom_bar(stat = 'identity', position = position_dodge2()) +
# geom_bar(stat = 'identity', position = position_dodge2()) +
scale_fill_manual(values = c(wes_palette('Darjeeling1', n = 5, type = 'discrete')[2:3], 'grey')) +
labs(x = 'Annotation Source', y = bquote(atop('Percent of networks', 'properly annotated')), fill = 'Experiment') +
gen_theme()
fpRates
fpRates%>%
filter(version %in% c('unmodified', 'FalsePositives', 'NAP'),
annotationSource %in% c('ecoNetConsensus', 'Molnet superclass', 'Molnet class', 'Molnet subclass'),
!fpCompare %in% c('ecoNetConsensus NAP', 'FalsePositives', 'unmodified'))%>%
ggplot(aes(fpCompare, truePositiveRate*100, fill = experiment)) +
# geom_bar(aes(y = percent, fill = 'Total Annotations'), stat = 'identity', position = position_dodge2()) +
geom_bar(stat = 'identity', position = position_dodge2()) +
scale_fill_manual(values = c(wes_palette('Darjeeling1', n = 5, type = 'discrete')[2:3], 'grey')) +
labs(x = 'Annotation Source', y = 'True Positive Rate', fill = 'Experiment') +
gen_theme()
fpRates
head(sums)
head(baseDf)
View(baseDf)
